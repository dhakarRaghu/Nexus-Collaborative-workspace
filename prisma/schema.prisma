// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "account_userId_index") // Unique name for the index
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "session_userId_index") // Unique name for the index
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(10)

  accounts Account[]
  sessions Session[]

  webAnalytic  webAnalysis[]
  chatPdfs     ChatPdf[]
}

enum MessageRole {
  USER
  SYSTEM
}

model webAnalysis {
  id         String   @id @default(cuid())
  name       String
  url        String   @unique
  content    String?
  embedding  Json?
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  chats      Chat[]
}

model ChatPdf {
  id         String   @id @default(cuid())
  name       String
  url        String   @unique
  content    String?
  embedding  Json?
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  chats      Chat[]
}

model Chat {
  id        Int       @id @default(autoincrement())
  projectId     String?
  projectPdfId  String? 
  createdAt     DateTime  @default(now())

  project       webAnalysis? @relation(fields: [projectId], references: [id])
  projectPdf    ChatPdf?    @relation(fields: [projectPdfId], references: [id])
  messages      Message[]



}

model Message {
  id        Int         @id @default(autoincrement())
  chatId    Int
  content   String
  role      MessageRole
  createdAt DateTime    @default(now())

  chat      Chat        @relation(fields: [chatId], references: [id])
}
